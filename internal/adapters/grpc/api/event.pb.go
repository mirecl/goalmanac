// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/event.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Создание события в календаре
type EventCreate struct {
	User                 string               `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Title                string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Body                 string               `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Starttime            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=starttime,proto3" json:"starttime,omitempty"`
	Duration             string               `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EventCreate) Reset()         { *m = EventCreate{} }
func (m *EventCreate) String() string { return proto.CompactTextString(m) }
func (*EventCreate) ProtoMessage()    {}
func (*EventCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d236019f42e23116, []int{0}
}

func (m *EventCreate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventCreate.Unmarshal(m, b)
}
func (m *EventCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventCreate.Marshal(b, m, deterministic)
}
func (m *EventCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreate.Merge(m, src)
}
func (m *EventCreate) XXX_Size() int {
	return xxx_messageInfo_EventCreate.Size(m)
}
func (m *EventCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreate.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreate proto.InternalMessageInfo

func (m *EventCreate) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *EventCreate) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EventCreate) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *EventCreate) GetStarttime() *timestamp.Timestamp {
	if m != nil {
		return m.Starttime
	}
	return nil
}

func (m *EventCreate) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

// Обновление события в календаре
type EventUpdate struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User                 string               `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Title                string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Body                 string               `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Starttime            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=starttime,proto3" json:"starttime,omitempty"`
	Duration             string               `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EventUpdate) Reset()         { *m = EventUpdate{} }
func (m *EventUpdate) String() string { return proto.CompactTextString(m) }
func (*EventUpdate) ProtoMessage()    {}
func (*EventUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d236019f42e23116, []int{1}
}

func (m *EventUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventUpdate.Unmarshal(m, b)
}
func (m *EventUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventUpdate.Marshal(b, m, deterministic)
}
func (m *EventUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdate.Merge(m, src)
}
func (m *EventUpdate) XXX_Size() int {
	return xxx_messageInfo_EventUpdate.Size(m)
}
func (m *EventUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdate proto.InternalMessageInfo

func (m *EventUpdate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EventUpdate) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *EventUpdate) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EventUpdate) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *EventUpdate) GetStarttime() *timestamp.Timestamp {
	if m != nil {
		return m.Starttime
	}
	return nil
}

func (m *EventUpdate) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

// Id события - для удаления
type EventDelete struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventDelete) Reset()         { *m = EventDelete{} }
func (m *EventDelete) String() string { return proto.CompactTextString(m) }
func (*EventDelete) ProtoMessage()    {}
func (*EventDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_d236019f42e23116, []int{2}
}

func (m *EventDelete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventDelete.Unmarshal(m, b)
}
func (m *EventDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventDelete.Marshal(b, m, deterministic)
}
func (m *EventDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDelete.Merge(m, src)
}
func (m *EventDelete) XXX_Size() int {
	return xxx_messageInfo_EventDelete.Size(m)
}
func (m *EventDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDelete.DiscardUnknown(m)
}

var xxx_messageInfo_EventDelete proto.InternalMessageInfo

func (m *EventDelete) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Пользователь
type EventUser struct {
	User                 string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventUser) Reset()         { *m = EventUser{} }
func (m *EventUser) String() string { return proto.CompactTextString(m) }
func (*EventUser) ProtoMessage()    {}
func (*EventUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d236019f42e23116, []int{3}
}

func (m *EventUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventUser.Unmarshal(m, b)
}
func (m *EventUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventUser.Marshal(b, m, deterministic)
}
func (m *EventUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUser.Merge(m, src)
}
func (m *EventUser) XXX_Size() int {
	return xxx_messageInfo_EventUser.Size(m)
}
func (m *EventUser) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUser.DiscardUnknown(m)
}

var xxx_messageInfo_EventUser proto.InternalMessageInfo

func (m *EventUser) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

// Cобытие в календаре
type Event struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User                 string               `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Title                string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Body                 string               `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Starttime            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=starttime,proto3" json:"starttime,omitempty"`
	Endtime              *timestamp.Timestamp `protobuf:"bytes,6,opt,name=endtime,proto3" json:"endtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_d236019f42e23116, []int{4}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Event) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Event) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Event) GetStarttime() *timestamp.Timestamp {
	if m != nil {
		return m.Starttime
	}
	return nil
}

func (m *Event) GetEndtime() *timestamp.Timestamp {
	if m != nil {
		return m.Endtime
	}
	return nil
}

// Успешный ответ - список Cобытий
type ResponseEvents struct {
	Result               []*Event `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseEvents) Reset()         { *m = ResponseEvents{} }
func (m *ResponseEvents) String() string { return proto.CompactTextString(m) }
func (*ResponseEvents) ProtoMessage()    {}
func (*ResponseEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_d236019f42e23116, []int{5}
}

func (m *ResponseEvents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseEvents.Unmarshal(m, b)
}
func (m *ResponseEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseEvents.Marshal(b, m, deterministic)
}
func (m *ResponseEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseEvents.Merge(m, src)
}
func (m *ResponseEvents) XXX_Size() int {
	return xxx_messageInfo_ResponseEvents.Size(m)
}
func (m *ResponseEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseEvents.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseEvents proto.InternalMessageInfo

func (m *ResponseEvents) GetResult() []*Event {
	if m != nil {
		return m.Result
	}
	return nil
}

// Успешный ответ от сервиса
type ResponseOK struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseOK) Reset()         { *m = ResponseOK{} }
func (m *ResponseOK) String() string { return proto.CompactTextString(m) }
func (*ResponseOK) ProtoMessage()    {}
func (*ResponseOK) Descriptor() ([]byte, []int) {
	return fileDescriptor_d236019f42e23116, []int{6}
}

func (m *ResponseOK) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseOK.Unmarshal(m, b)
}
func (m *ResponseOK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseOK.Marshal(b, m, deterministic)
}
func (m *ResponseOK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseOK.Merge(m, src)
}
func (m *ResponseOK) XXX_Size() int {
	return xxx_messageInfo_ResponseOK.Size(m)
}
func (m *ResponseOK) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseOK.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseOK proto.InternalMessageInfo

func (m *ResponseOK) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*EventCreate)(nil), "EventCreate")
	proto.RegisterType((*EventUpdate)(nil), "EventUpdate")
	proto.RegisterType((*EventDelete)(nil), "EventDelete")
	proto.RegisterType((*EventUser)(nil), "EventUser")
	proto.RegisterType((*Event)(nil), "Event")
	proto.RegisterType((*ResponseEvents)(nil), "ResponseEvents")
	proto.RegisterType((*ResponseOK)(nil), "ResponseOK")
}

func init() { proto.RegisterFile("api/event.proto", fileDescriptor_d236019f42e23116) }

var fileDescriptor_d236019f42e23116 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0xdf, 0x6a, 0xd4, 0x40,
	0x14, 0x87, 0x9b, 0xec, 0x26, 0x75, 0x4f, 0x6a, 0x0b, 0x83, 0x94, 0x10, 0xd1, 0x2e, 0x83, 0xc2,
	0x5e, 0xe8, 0xac, 0x6c, 0xbd, 0xf0, 0xb6, 0xda, 0xb2, 0x17, 0x22, 0x42, 0x50, 0x04, 0xef, 0x66,
	0xcd, 0xb1, 0x06, 0x93, 0x4c, 0x48, 0x4e, 0x84, 0x7d, 0x1c, 0x1f, 0xc1, 0x37, 0xf0, 0xc6, 0xf7,
	0x92, 0xf9, 0x93, 0x6d, 0xdd, 0x46, 0x5c, 0xbc, 0xea, 0x5d, 0x7e, 0x33, 0xdf, 0xcc, 0x7c, 0x67,
	0xe6, 0x04, 0x8e, 0x64, 0x9d, 0xcf, 0xf1, 0x1b, 0x56, 0x24, 0xea, 0x46, 0x91, 0x4a, 0x4e, 0x2e,
	0x95, 0xba, 0x2c, 0x70, 0x6e, 0xd2, 0xaa, 0xfb, 0x3c, 0xa7, 0xbc, 0xc4, 0x96, 0x64, 0x59, 0x3b,
	0xe0, 0xfe, 0x36, 0x80, 0x65, 0x4d, 0x6b, 0x3b, 0xc9, 0xbf, 0x7b, 0x10, 0x5d, 0xe8, 0xdd, 0x5e,
	0x35, 0x28, 0x09, 0x19, 0x83, 0x71, 0xd7, 0x62, 0x13, 0x7b, 0x53, 0x6f, 0x36, 0x49, 0xcd, 0x37,
	0xbb, 0x07, 0x01, 0xe5, 0x54, 0x60, 0xec, 0x9b, 0x41, 0x1b, 0x34, 0xb9, 0x52, 0xd9, 0x3a, 0x1e,
	0x59, 0x52, 0x7f, 0xb3, 0x17, 0x30, 0x69, 0x49, 0x36, 0xa4, 0x15, 0xe2, 0xf1, 0xd4, 0x9b, 0x45,
	0x8b, 0x44, 0xd8, 0xe3, 0x45, 0x7f, 0xbc, 0x78, 0xd7, 0xfb, 0xa5, 0x57, 0x30, 0x4b, 0xe0, 0x4e,
	0xd6, 0x35, 0x92, 0x72, 0x55, 0xc5, 0x81, 0xd9, 0x71, 0x93, 0xf9, 0x8f, 0xde, 0xf1, 0x7d, 0x9d,
	0x69, 0xc7, 0x43, 0xf0, 0xf3, 0xcc, 0x19, 0xfa, 0x79, 0xb6, 0x71, 0xf6, 0x87, 0x9c, 0x47, 0x43,
	0xce, 0xe3, 0xbf, 0x39, 0x07, 0xff, 0xeb, 0x1c, 0x6e, 0x39, 0x3f, 0x70, 0xca, 0xe7, 0x58, 0xe0,
	0x4d, 0x65, 0x7e, 0x02, 0x13, 0x5b, 0x91, 0x76, 0x1d, 0xb8, 0x73, 0xfe, 0xcb, 0x83, 0xc0, 0x10,
	0xb7, 0xa6, 0xda, 0xe7, 0xb0, 0x8f, 0x55, 0x66, 0xd6, 0x85, 0xff, 0x5c, 0xd7, 0xa3, 0xfc, 0x19,
	0x1c, 0xa6, 0xd8, 0xd6, 0xaa, 0x6a, 0xd1, 0x94, 0xd3, 0xb2, 0x87, 0x10, 0x36, 0xd8, 0x76, 0x05,
	0xc5, 0xde, 0x74, 0x34, 0x8b, 0x16, 0xa1, 0x30, 0x13, 0xa9, 0x1b, 0xe5, 0x8f, 0x00, 0xfa, 0x15,
	0x6f, 0x5f, 0xb3, 0xe3, 0x6b, 0xb4, 0xae, 0xc2, 0xa5, 0xc5, 0x4f, 0x1f, 0xf6, 0xcf, 0x8a, 0x52,
	0x56, 0xf2, 0x13, 0x7b, 0x0c, 0xa1, 0xeb, 0xde, 0x03, 0x71, 0xad, 0x97, 0x93, 0x48, 0x5c, 0x6d,
	0xc4, 0xf7, 0x34, 0xe6, 0x1a, 0xc8, 0x61, 0x36, 0x0d, 0x60, 0xee, 0xd1, 0x1c, 0x66, 0xd3, 0x36,
	0x76, 0x0a, 0xe1, 0x12, 0xe9, 0xac, 0x28, 0xd8, 0xf1, 0x8d, 0x7b, 0xb8, 0xd0, 0x3f, 0x58, 0x72,
	0x24, 0xfe, 0xac, 0x9c, 0xef, 0xb1, 0x27, 0x10, 0x2d, 0x91, 0xce, 0xe5, 0xda, 0x3e, 0x2d, 0x88,
	0x4d, 0x13, 0x0c, 0xd1, 0x4f, 0xe1, 0x60, 0x89, 0xf4, 0x01, 0xf1, 0xeb, 0x4e, 0xb8, 0x80, 0xbb,
	0x4b, 0xa4, 0x37, 0xaa, 0xa2, 0x2f, 0xbb, 0xf0, 0x2f, 0x83, 0x8f, 0x23, 0x59, 0xe7, 0xab, 0xd0,
	0x68, 0x9f, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x03, 0x7e, 0xad, 0x59, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AlmanacClient is the client API for Almanac service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlmanacClient interface {
	Create(ctx context.Context, in *EventCreate, opts ...grpc.CallOption) (*ResponseOK, error)
	Update(ctx context.Context, in *EventUpdate, opts ...grpc.CallOption) (*ResponseOK, error)
	Delete(ctx context.Context, in *EventDelete, opts ...grpc.CallOption) (*ResponseOK, error)
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ResponseEvents, error)
	GetDayEvent(ctx context.Context, in *EventUser, opts ...grpc.CallOption) (*ResponseEvents, error)
	GetWeekEvent(ctx context.Context, in *EventUser, opts ...grpc.CallOption) (*ResponseEvents, error)
	GetMonthEvent(ctx context.Context, in *EventUser, opts ...grpc.CallOption) (*ResponseEvents, error)
}

type almanacClient struct {
	cc *grpc.ClientConn
}

func NewAlmanacClient(cc *grpc.ClientConn) AlmanacClient {
	return &almanacClient{cc}
}

func (c *almanacClient) Create(ctx context.Context, in *EventCreate, opts ...grpc.CallOption) (*ResponseOK, error) {
	out := new(ResponseOK)
	err := c.cc.Invoke(ctx, "/Almanac/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *almanacClient) Update(ctx context.Context, in *EventUpdate, opts ...grpc.CallOption) (*ResponseOK, error) {
	out := new(ResponseOK)
	err := c.cc.Invoke(ctx, "/Almanac/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *almanacClient) Delete(ctx context.Context, in *EventDelete, opts ...grpc.CallOption) (*ResponseOK, error) {
	out := new(ResponseOK)
	err := c.cc.Invoke(ctx, "/Almanac/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *almanacClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ResponseEvents, error) {
	out := new(ResponseEvents)
	err := c.cc.Invoke(ctx, "/Almanac/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *almanacClient) GetDayEvent(ctx context.Context, in *EventUser, opts ...grpc.CallOption) (*ResponseEvents, error) {
	out := new(ResponseEvents)
	err := c.cc.Invoke(ctx, "/Almanac/GetDayEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *almanacClient) GetWeekEvent(ctx context.Context, in *EventUser, opts ...grpc.CallOption) (*ResponseEvents, error) {
	out := new(ResponseEvents)
	err := c.cc.Invoke(ctx, "/Almanac/GetWeekEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *almanacClient) GetMonthEvent(ctx context.Context, in *EventUser, opts ...grpc.CallOption) (*ResponseEvents, error) {
	out := new(ResponseEvents)
	err := c.cc.Invoke(ctx, "/Almanac/GetMonthEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlmanacServer is the server API for Almanac service.
type AlmanacServer interface {
	Create(context.Context, *EventCreate) (*ResponseOK, error)
	Update(context.Context, *EventUpdate) (*ResponseOK, error)
	Delete(context.Context, *EventDelete) (*ResponseOK, error)
	GetAll(context.Context, *empty.Empty) (*ResponseEvents, error)
	GetDayEvent(context.Context, *EventUser) (*ResponseEvents, error)
	GetWeekEvent(context.Context, *EventUser) (*ResponseEvents, error)
	GetMonthEvent(context.Context, *EventUser) (*ResponseEvents, error)
}

// UnimplementedAlmanacServer can be embedded to have forward compatible implementations.
type UnimplementedAlmanacServer struct {
}

func (*UnimplementedAlmanacServer) Create(ctx context.Context, req *EventCreate) (*ResponseOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAlmanacServer) Update(ctx context.Context, req *EventUpdate) (*ResponseOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedAlmanacServer) Delete(ctx context.Context, req *EventDelete) (*ResponseOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedAlmanacServer) GetAll(ctx context.Context, req *empty.Empty) (*ResponseEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedAlmanacServer) GetDayEvent(ctx context.Context, req *EventUser) (*ResponseEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDayEvent not implemented")
}
func (*UnimplementedAlmanacServer) GetWeekEvent(ctx context.Context, req *EventUser) (*ResponseEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeekEvent not implemented")
}
func (*UnimplementedAlmanacServer) GetMonthEvent(ctx context.Context, req *EventUser) (*ResponseEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthEvent not implemented")
}

func RegisterAlmanacServer(s *grpc.Server, srv AlmanacServer) {
	s.RegisterService(&_Almanac_serviceDesc, srv)
}

func _Almanac_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlmanacServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Almanac/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlmanacServer).Create(ctx, req.(*EventCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Almanac_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlmanacServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Almanac/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlmanacServer).Update(ctx, req.(*EventUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Almanac_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlmanacServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Almanac/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlmanacServer).Delete(ctx, req.(*EventDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Almanac_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlmanacServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Almanac/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlmanacServer).GetAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Almanac_GetDayEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlmanacServer).GetDayEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Almanac/GetDayEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlmanacServer).GetDayEvent(ctx, req.(*EventUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Almanac_GetWeekEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlmanacServer).GetWeekEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Almanac/GetWeekEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlmanacServer).GetWeekEvent(ctx, req.(*EventUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Almanac_GetMonthEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlmanacServer).GetMonthEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Almanac/GetMonthEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlmanacServer).GetMonthEvent(ctx, req.(*EventUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _Almanac_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Almanac",
	HandlerType: (*AlmanacServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Almanac_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Almanac_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Almanac_Delete_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Almanac_GetAll_Handler,
		},
		{
			MethodName: "GetDayEvent",
			Handler:    _Almanac_GetDayEvent_Handler,
		},
		{
			MethodName: "GetWeekEvent",
			Handler:    _Almanac_GetWeekEvent_Handler,
		},
		{
			MethodName: "GetMonthEvent",
			Handler:    _Almanac_GetMonthEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/event.proto",
}
